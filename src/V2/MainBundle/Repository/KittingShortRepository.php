<?php

namespace V2\MainBundle\Repository;

/**
 * KittingShortRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KittingShortRepository extends \Doctrine\ORM\EntityRepository
{
    public function findSupplyChainParts($parameters)
    {
        $partNumber = $parameters['part_number'];
        $vendor     = $parameters['vendor'];
        $name       = $parameters['name'];

        $qb = $this->createQueryBuilder('ks')
            // ->addSelect('CASE WHEN ks.vendor IS NULL and ks.dateNeeded IS NULL THEN 1 ELSE 2 END AS HIDDEN ordering1')
            ->addSelect("CASE WHEN (ks.vendor IS NULL OR ks.vendor = '') THEN 1 ELSE 2 END AS HIDDEN ordering2")
            ->addSelect("CASE WHEN ks.vendorPoNumber IS NULL THEN 1 ELSE 2 END AS HIDDEN ordering3")            
            ->addSelect("CASE WHEN ks.dateNeeded IS NULL THEN 1 ELSE 2 END AS HIDDEN ordering4")
            ->leftJoin('ks.kitting', 'kitting')
            ->leftJoin('kitting.job', 'job')
            ->leftJoin('job.scheduling', 'scheduling')
            ->where('ks.receivedDate IS NULL')
            ->andWhere("(ks.vendor IS NULL or UPPER(ks.vendor) != 'V2')")
            ->andWhere("job.cancelledDate IS NULL");

        if ($partNumber) {
            $qb->andWhere("ks.partNumber LIKE :partNumber")
                ->setParameter('partNumber', "%" . $partNumber . "%");
        }

        if ($vendor) {
            $qb->andWhere("ks.vendor LIKE :vendor")
                ->setParameter('vendor', "%" . $vendor . "%");
        }

        if ($name) {
            $qb->andWhere("job.name LIKE :name")
                ->setParameter('name', "%" . $name . "%");
        }

        $results = $qb
            // ->addOrderBy("ordering1")
            ->addOrderBy("ordering2")
            ->addOrderBy("ks.dateNeeded", "ASC")
            ->addOrderBy("ordering3")
            ->addOrderBy("ordering4")
            // ->addOrderBy("ks.vendor")
            // ->addOrderBy("ks.vendorPoNumber")
            ->addOrderBy("job.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findReceiverParts($parameters)
    {
        $partNumber = $parameters['part_number'];
        $vendorPoNumber = $parameters['vendor_po_number'];

        $qb = $this->createQueryBuilder('ks')
            ->addSelect('CASE WHEN ks.estimatedDeliveryDate IS NOT NULL THEN 1 ELSE 2 END AS HIDDEN ordering1')
            ->addSelect('CASE WHEN ks.dateNeeded IS NOT NULL THEN 1 ELSE 2 END AS HIDDEN ordering2')
            ->leftJoin('ks.kitting', 'kitting')
            ->leftJoin('kitting.job', 'job')
            ->leftJoin('job.scheduling', 'scheduling')
            ->where("ks.receivedDate IS NULL")
            ->andWhere("job.cancelledDate IS NULL");

        if ($partNumber) {
            $qb->andWhere("ks.partNumber LIKE :partNumber")
                ->setParameter('partNumber', "%" . $partNumber . "%");
        }

        if ($vendorPoNumber) {
            $qb->andWhere("ks.vendorPoNumber LIKE :vendorPoNumber")
                ->setParameter('vendorPoNumber', "%" . $vendorPoNumber . "%");
        }

        $results = $qb
            ->addOrderBy("ordering1", "ASC")
            ->addOrderBy("ks.estimatedDeliveryDate", "ASC")
            ->addOrderBy("ordering2", "ASC")
            ->addOrderBy("ks.dateNeeded", "ASC")
            ->addOrderBy("job.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        // Remove any shorts that are from V2 that don't have a job associated to it
        // The reasoning is that in-house mods will be built and put back into inventory, therefore no need to be received
        foreach($results as $index => $result) {
            if (strtoupper($result->getVendor()) == 'V2' && $result->getKitting() == null) {
                unset($results[$index]);
            }
        }

        return $results;
    }

    public function findManufacturerParts($parameters)
    {
        $dateNeededFrom = $parameters['date_needed_from'];
        $dateNeededTo   = $parameters['date_needed_to'];
        $partNumber     = $parameters['part_number'];
        $salesOrder     = $parameters['sales_order'];

        $qb = $this->createQueryBuilder('ks')
            ->addSelect('CASE WHEN ks.dateNeeded IS NOT NULL THEN 1 ELSE 2 END AS HIDDEN ordering1')
            ->leftJoin('ks.kitting', 'kitting')
            ->leftJoin('kitting.job', 'job')
            ->leftJoin('job.scheduling', 'scheduling')
            ->where("ks.receivedDate IS NULL")
            ->andWhere("UPPER(ks.vendor) = 'V2'")
            ->andWhere("((kitting.filledCompletely IS NOT NULL AND kitting.filledCompletely = 0) OR kitting.filledCompletely IS NULL)")
            ->andWhere("job.cancelledDate IS NULL");

        if ($dateNeededFrom) {
            $qb->andWhere('ks.dateNeeded >= :dateNeededFrom')
                ->setParameter('dateNeededFrom', new \DateTime($dateNeededFrom));
        }

        if ($dateNeededTo) {
            $qb->andWhere('ks.dateNeeded <= :dateNeededTo')
                ->setParameter('dateNeededTo', new \DateTime($dateNeededTo . " 23:59:59"));
        }

        if ($partNumber) {
            $qb->andWhere("ks.partNumber LIKE :partNumber")
                ->setParameter('partNumber', "%" . $partNumber . "%");
        }

        if ($salesOrder) {
            $qb->andWhere("job.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        $results = $qb
            ->addOrderBy("ordering1", "ASC")
            ->addOrderBy("ks.dateNeeded", "ASC")
            ->addOrderBy("ks.estimatedDeliveryDate", "ASC")
            ->addOrderBy("job.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }
}
