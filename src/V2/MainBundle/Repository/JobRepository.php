<?php

namespace V2\MainBundle\Repository;

use V2\MainBundle\Entity\BuildLocation;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends \Doctrine\ORM\EntityRepository
{
    public function getJobStats()
    {
        $qb = $this->createQueryBuilder('j')
            ->select('COUNT(j.id) as total')
            ->leftJoin('j.shipping', 'shipping')
            ->where("((shipping.shipDate IS NULL) OR (shipping.isComplete = 1 AND shipping.secondShipDate IS NULL))")
            ->andWhere("j.cancelledDate IS NULL");
        
        $results = $qb->getQuery()
            ->getResult();

        return $results;
    }

    public function getJobsLastWeek()
    {
        $sql = "SELECT WEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK),1) AS week_num, 
                SUM(IF(s.priority = 0, 1, 0)) AS num_jobs,
                SUM(IF(s.priority > 0, 1, 0)) AS num_rush_jobs
                FROM job j
                JOIN scheduling s ON s.job_id = j.id
                JOIN shipping ON shipping.job_id = j.id
                WHERE (shipping.is_complete = 2 OR shipping.second_ship_date IS NOT NULL)
                AND (WEEK(shipping.ship_date,1) = WEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK),1) OR WEEK(shipping.second_ship_date,1) = WEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK),1))
                AND cancelled_date IS NULL";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();

        return $results;
    }

    public function getJobsByWeek()
    {
        $sql = "SELECT WEEK(planner_estimated_ship_date,1) AS week_num, 
                SUM(IF(s.priority = 0, 1, 0)) AS num_jobs,
                SUM(IF(s.priority > 0, 1, 0)) AS num_rush_jobs
                FROM job j
                JOIN scheduling s ON s.job_id = j.id
                LEFT JOIN shipping ON shipping.job_id = j.id
                WHERE ((shipping.ship_date IS NULL) OR (shipping.is_complete = 1 AND shipping.second_ship_date IS NULL))
                AND WEEK(planner_estimated_ship_date,1) >= WEEK(NOW(),1)
                AND cancelled_date IS NULL
                GROUP BY WEEK(planner_estimated_ship_date,1);"; // need to offset by 1
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();

        return $results;
    }

    public function getJobsShippedThisWeek()
    {
        $sql = "SELECT COUNT(j.id) AS num_shipped_jobs
                FROM job j
                JOIN scheduling s ON s.job_id = j.id
                LEFT JOIN shipping ON shipping.job_id = j.id
                WHERE ((shipping.is_complete = 2) OR (shipping.second_ship_date IS NOT NULL))
                AND (WEEK(ship_date,1) = WEEK(NOW(),1) OR WEEK(second_ship_date,1) = WEEK(NOW(),1))
                AND cancelled_date IS NULL";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();

        return $results;
    }

    public function getProductionByWeek()
    {
        $sql = "SELECT WEEK(planner_estimated_ship_date,1) AS week_num, 
                SUM(IF(j.build_location = 1, quantity, 0)) AS num_v2_fixtures,
                SUM(IF(j.build_location = 2, quantity, 0)) AS num_mac_fixtures
                FROM job j
                JOIN scheduling s ON s.job_id = j.id
                WHERE WEEK(planner_estimated_ship_date,1) >= WEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK),1)
                AND cancelled_date IS NULL
                GROUP BY WEEK(planner_estimated_ship_date,1);";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();

        return $results;

    }

    public function getFixturesShippedByWeek()
    {
        $sql = "SELECT WEEK(ship_date,1) AS week_num, 
                SUM(IF(j.build_location = 1, quantity, 0)) AS num_v2_fixtures,
                SUM(IF(j.build_location = 2, quantity, 0)) AS num_mac_fixtures
                FROM job j
                JOIN scheduling s ON s.job_id = j.id
                JOIN shipping ON shipping.job_id = j.id
                WHERE WEEK(ship_date,1) >= WEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK),1)
                AND ((shipping.ship_date IS NOT NULL) OR (shipping.is_complete = 1 AND shipping.second_ship_date IS NOT NULL))
                AND cancelled_date IS NULL
                GROUP BY WEEK(ship_date,1);";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $res = $stmt->fetchAll();
        // Reformat the array so it's easier to access
        $results = array();
        foreach ($res as $data) {
            $results[$data['week_num']] = array('num_v2_fixtures' => $data['num_v2_fixtures'], 'num_mac_fixtures' => $data['num_mac_fixtures']);
        }

        return $results;
    }

    // Returns the actual number of fixtures shipped for the current week
    public function getFixturesShippedThisWeek()
    {
        $sql = "SELECT WEEK(ship_date,1) AS week_num, 
                SUM(IF(j.build_location = 1, quantity, 0)) AS num_v2_shipped,
                SUM(IF(j.build_location = 2, quantity, 0)) AS num_mac_shipped
                FROM job j
                JOIN scheduling s ON s.job_id = j.id
                JOIN shipping ON shipping.job_id = j.id
                WHERE WEEK(ship_date,1) = WEEK(NOW(),1)
                AND ((shipping.ship_date IS NOT NULL) OR (shipping.is_complete = 1 AND shipping.second_ship_date IS NOT NULL))
                AND cancelled_date IS NULL;";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();
        
        return $results[0];
    }

    // Returns the actual number of fixtures shipped for the current month
    public function getFixturesShippedThisMonth()
    {
        $sql = "SELECT WEEK(planner_estimated_ship_date,1) AS week_num, 
                SUM(IF(j.build_location = 1, quantity, 0)) AS num_v2_shipped,
                SUM(IF(j.build_location = 2, quantity, 0)) AS num_mac_shipped
                FROM job j
                JOIN scheduling s ON s.job_id = j.id
                JOIN shipping ON shipping.job_id = j.id
                WHERE MONTH(planner_estimated_ship_date) = MONTH(NOW())
                AND ((shipping.ship_date IS NOT NULL) OR (shipping.is_complete = 1 AND shipping.second_ship_date IS NOT NULL))
                AND cancelled_date IS NULL;";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();
        
        return $results[0];
    }

    public function getJobsByStage()
    {
        $results = array();
        $results['Bom Builder'] = $this->findBomBuilderJobs(array('name'=>null,'sales_order'=>null));
        $results['Kitter'] = $this->findKitterJobs(array('name'=>null,'sales_order'=>null));
        $results['To Paint'] = $this->getJobsToPaint();
        $results['In Batches'] = $this->getJobsInBatches();
        $results['Manufacturing'] = $this->findManufacturerJobs(array('date_needed_from'=>null,'date_needed_to'=>null));
        $results['Supply Chain'] = $this->findSupplyChainJobs(array('part_number'=>null,'vendor'=>null));
        $results['V2 Production'] = $this->findV2ProductionJobs(array());
        $results['MAC Production'] = $this->findMacProductionJobs(array());
        return $results;
    }

    public function getJobsToPaint()
    {
        $qb = $this->createQueryBuilder('j');
        $results = $qb->join('j.paint', 'paint')
            ->join('j.kitting', 'kitting')
            ->where("paint.color1 IS NOT NULL AND paint.batch1 IS NULL")
            ->orWhere("paint.color2 IS NOT NULL AND paint.batch2 IS NULL")
            ->andWhere("kitting.completionDate IS NULL")
            ->andWhere("j.cancelledDate IS NULL")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function getJobsInBatches()
    {
        $qb = $this->createQueryBuilder('j');
        $results = $qb->join('j.paint', 'paint')
            ->join('j.kitting', 'kitting')
            ->where("paint.color1 IS NOT NULL AND paint.batch1 IS NOT NULL")
            ->orWhere("paint.color2 IS NOT NULL AND paint.batch2 IS NOT NULL")
            ->andWhere("kitting.completionDate IS NULL")
            ->andWhere("j.cancelledDate IS NULL")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function getLateJobs()
    {
        $qb = $this->createQueryBuilder('j');
        $results = $qb->join('j.shipping', 'shipping')
            ->where("j.estimatedShipDate <= CURRENT_DATE()")
            ->andWhere("((shipping.shipDate IS NULL) OR (shipping.isComplete = 1 AND shipping.secondShipDate IS NULL))")
            ->andWhere("j.cancelledDate IS NULL")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function getNumJobReleasedByWeeks($numWeeks)
    {
        $sql = "SELECT COUNT(j.id) AS total
                FROM job j
                WHERE WEEK(j.create_time,1) = WEEK(DATE_SUB(NOW(), INTERVAL $numWeeks WEEK),1)
                AND cancelled_date IS NULL;";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();

        if (count($results) <= 0) {
            return 0;
        }
        return $results[0]['total'];
    }

    public function getScheduledJobs(BuildLocation $buildLocation, $startDate, $endDate)
    {
        $qb = $this->createQueryBuilder('j')
            ->select('COUNT(j.id) as total')
            ->leftJoin('j.kitting', 'kitting')
            ->leftJoin('j.bom', 'bom')
            ->leftJoin('j.shipping', 'shipping')
            ->leftJoin('j.scheduling', 'scheduling')
            ->where('j.buildLocation = :buildLocation')
            ->setParameter('buildLocation', $buildLocation)
            ->andWhere('j.estimatedShipDate >= :startDate')
            ->setParameter('startDate', $startDate)
            ->andWhere('j.estimatedShipDate <= :endDate')
            ->setParameter('endDate', $endDate)
            ->andWhere("j.cancelledDate IS NULL");

        $results = $qb->getQuery()
            ->getResult();

        if (count($results) <= 0) {
            return 0;
        }

        return $results[0];
    }

    // Gets the number of jobs shipped by a specific number of weeks
    public function getNumJobShippedByWeeks($numWeeks)
    {
        $sql = "SELECT COUNT(j.id) AS total
                FROM job j
                LEFT JOIN shipping s ON s.job_id = j.id
                WHERE WEEK(s.ship_date,1) = WEEK(DATE_SUB(NOW(), INTERVAL $numWeeks WEEK),1)
                AND cancelled_date IS NULL;";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $results = $stmt->fetchAll();

        if (count($results) <= 0) {
            return 0;
        }
        return $results[0]['total'];
    }

    // Basically returns all the fields of a job
    public function findEverything($parameters)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('WEEK', 'DoctrineExtensions\Query\Mysql\Week');

        $name                           = $parameters['name'];
        $salesOrder                     = $parameters['sales_order'];
        $estimatedShipDateFrom          = $parameters['esd_date_from'];
        $estimatedShipDateTo            = $parameters['esd_date_to'];
        $nonShipped                     = $parameters['non_shipped'];
        $plannerEstimatedShipDateFrom   = $parameters['planner_esd_date_from'];
        $plannerEstimatedShipDateTo     = $parameters['planner_esd_date_to'];
        $plannerEstimatedShipWeekFrom   = $parameters['planner_esd_week_from'];
        $plannerEstimatedShipWeekTo     = $parameters['planner_esd_week_to'];

        $qb = $this->createQueryBuilder('j')
            ->leftJoin('j.bom', 'bom')
            ->leftJoin('j.shipping', 'shipping')
            ->leftjoin('j.kitting', 'kitting')
            ->leftjoin('j.scheduling', 'scheduling')
            ->leftJoin('j.paint', 'paint')
            ->where('j.id > 0');

        if ($name) {
            $qb->andWhere("j.name LIKE :name")
                ->setParameter('name', "%" . $name . "%");
        }

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        if ($estimatedShipDateFrom) {
            $qb->andWhere("j.estimatedShipDate >= :estimatedShipDateFrom")
                ->setParameter('estimatedShipDateFrom', new \DateTime($estimatedShipDateFrom));
        }

        if ($estimatedShipDateTo) {
            $qb->andWhere("j.estimatedShipDate <= :estimatedShipDateTo")
                ->setParameter('estimatedShipDateTo', new \DateTime($estimatedShipDateTo));
        }

        if ($plannerEstimatedShipDateFrom) {
            $qb->andWhere("j.plannerEstimatedShipDate >= :plannerEstimatedShipDateFrom")
                ->setParameter('plannerEstimatedShipDateFrom', new \DateTime($plannerEstimatedShipDateFrom));
        }

        if ($plannerEstimatedShipDateTo) {
            $qb->andWhere("j.plannerEstimatedShipDate <= :plannerEstimatedShipDateTo")
                ->setParameter('plannerEstimatedShipDateTo', new \DateTime($plannerEstimatedShipDateTo));
        }

        if ($plannerEstimatedShipWeekFrom) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) >= :plannerEstimatedShipWeekFrom")
                ->setParameter('plannerEstimatedShipWeekFrom', $plannerEstimatedShipWeekFrom);
        }

        if ($plannerEstimatedShipWeekTo) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) <= :plannerEstimatedShipWeekTo")
                ->setParameter('plannerEstimatedShipWeekTo', $plannerEstimatedShipWeekTo);
        }

        if ($nonShipped) {
            $qb->andWhere("shipping.shipDate IS NULL");
        }

        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->addOrderBy("j.salesOrder", "ASC")
            ->getQuery()
            ->getResult();

        // Add the custom sort order so that we can use it for conditional formatting
        foreach ($results as $index => $result) {
            // if ($result->getPlannerEstimatedShipDate()->format('Y-m-d') <= date('Y-m-d')) {
            //     $results[$index]->customSortOrder = 1;
            // } elseif ($result->getScheduling()->getPriority() == 3) {
            //     $results[$index]->customSortOrder = 2;
            // } elseif ($result->getScheduling()->getPriority() == 2) {
            //     $results[$index]->customSortOrder = 3;
            // } else {
                $results[$index]->formatting = 0;
            // }
        }

        return $results;
    }

    public function findAllJobs($parameters)
    {
        $seeAll                     = $parameters['see_all'];
        $name                       = $parameters['name'];
        $salesOrder                 = $parameters['sales_order'];
        $plannerEstimatedShipDate   = $parameters['planner_esd'];

        $qb         = $this->createQueryBuilder('j')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('j.shipping', 'shipping')
            ->where('j.id > 0')
            ->andWhere("j.cancelledDate IS NULL");

        if ($name) {
            $qb->andWhere("j.name LIKE :name")
                ->setParameter('name', "%" . $name . "%");
        }

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        if ($plannerEstimatedShipDate) {
            $qb->andWhere("j.plannerEstimatedShipDate = :plannerEstimatedShipDate")
                ->setParameter('plannerEstimatedShipDate', new \DateTime($plannerEstimatedShipDate));
        }
        
        if ($seeAll === 0) {
            $qb->andWhere("j.plannerEstimatedShipDate IS NULL");
        }

        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.createTime", "ASC")
            ->addOrderBy("shipping.shipDate", "ASC")
            ->addOrderBy("shipping.secondShipDate", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findByJobName($name)
    {
        $qb         = $this->createQueryBuilder('j');
        $results    = $qb->where("upper(j.name) LIKE :name")
            ->setParameter('name', "%" . strtoupper($name) . "%")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findBomBuilderJobs($parameters)
    {
        $name       = $parameters['name'];
        $salesOrder = $parameters['sales_order'];

        $qb = $this->createQueryBuilder('j')
            ->addSelect('1 AS HIDDEN late')
            ->join('j.scheduling', 'scheduling')
            ->join('j.bom', 'bom')
            ->where("j.manufacturingOrder IS NULL")
            ->orWhere("bom.serialsGeneratedDate IS NULL")
            ->andWhere("j.cancelledDate IS NULL");

        if ($name) {
            $qb->andWhere("j.name LIKE :name")
                ->setParameter('name', "%" . $name . "%");
        }

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        // Add the conditional formatting
        // Once the job has been in BOM view for 3 days it goes to a light red color
        foreach ($results as $index => $result) {
            if ($result->getBom()->getBomViewDate() != null &&
                self::date_diff_weekdays($result->getBom()->getBomViewDate()->format('Y-m-d'), date('Y-m-d')) >= 3) {
                $results[$index]->late = 1;
            } else {
                // If this is the first time the job shows up in Kitting View, we set the CTK date
                if ($result->getBom()->getBomViewDate() == null) {
                    $result->getBom()->setBomViewDate(new \DateTime());
                    $this->_em->flush();
                }

                $results[$index]->late = null;
            }
        }

        return $results;
    }

    public function findKitterJobs($parameters)
    {
        $name       = $parameters['name'];
        $salesOrder = $parameters['sales_order'];

        // CTK : Clear to kit; jobs vetted and jobs with no shorts or shorts received or shorts class = ignore
        $qb = $this->createQueryBuilder('j')
            ->addSelect('1 AS HIDDEN late')
            ->join('j.kitting', 'kitting')
            ->join('j.scheduling', 'scheduling')
            ->join('j.bom', 'bom')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("(kitting.kitDate IS NULL OR kitting.completionDate IS NULL)")
            ->andWhere("scheduling.priority != 2")
            ->andWhere("(kitting.kittingShort1 IS NULL AND 
                         kitting.kittingShort2 IS NULL AND 
                         kitting.kittingShort3 IS NULL AND 
                         kitting.kittingShort4 IS NULL) OR
                        (kitting.kittingShort1 IS NOT NULL AND (kittingShort1.receivedDate IS NOT NULL OR kittingShort1.shortClass = 2)) OR
                        (kitting.kittingShort2 IS NOT NULL AND (kittingShort2.receivedDate IS NOT NULL OR kittingShort2.shortClass = 2)) OR
                        (kitting.kittingShort3 IS NOT NULL AND (kittingShort3.receivedDate IS NOT NULL OR kittingShort3.shortClass = 2)) OR
                        (kitting.kittingShort4 IS NOT NULL AND (kittingShort4.receivedDate IS NOT NULL OR kittingShort4.shortClass = 2))") 
            ->andWhere("j.cancelledDate IS NULL");

        if ($name) {
            $qb->andWhere("j.name LIKE :name")
                ->setParameter('name', "%" . $name . "%");
        }

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }
        
        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.salesOrder", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        // Add the conditional formatting
        // Once the job has been in kitting for 4 days it goes to a light red color
        foreach ($results as $index => $result) {
            if ($result->getKitting()->getCtkDate() != null &&
                self::date_diff_weekdays($result->getKitting()->getCtkDate()->format('Y-m-d'), date('Y-m-d')) >= 4) {
                $results[$index]->late = 1;
            } else {
                // If this is the first time the job shows up in Kitting View, we set the CTK date
                if ($result->getKitting()->getCtkDate() == null) {
                    $result->getKitting()->setCtkDate(new \DateTime());
                    $this->_em->flush();
                }

                $results[$index]->late = null;
            }
        }

        return $results;
    }

    /**
     * Calculate number of weekdays between two dates.
     *
     * @param string $from  Start date, in format "YYYY-MM-DD"
     * @param string $to    End datem in format "YYYY-MM-DD"
     * @return int|null     Number of weekdays between $from and $to. NULL if either $from or $to is NULL.
     */
    static function date_diff_weekdays($from, $to) {
        if ($from === null || $to === null)
            return null;
        $date_from = new \DateTime($from);
        $date_to = new \DateTime($to);
        // calculate number of weekdays from start of week - start date
        $from_day = intval($date_from->format('w')); // 0 (for Sunday) through 6 (for Saturday)
        if ($from_day == 0)
            $from_day = 7;
        $from_wdays = $from_day > 5 ? 5 : $from_day;
        // calculate number of weekdays from start of week - end date
        $to_day = intval($date_to->format('w'));
        if ($to_day == 0)
            $to_day = 7;
        $to_wdays = $to_day > 5 ? 5 : $to_day;
        // calculate number of days between the two dates
        $interval = $date_from->diff($date_to);
        $days = intval($interval->format('%R%a')); // shows negative values too
        // calculate number of full weeks between the two dates
        $weeks_between = floor($days / 7);
        if ($to_day >= $from_day)
            $weeks_between -= 1;
        // complete calculation of number of working days between
        $diff_wd = 5 * ($weeks_between) + (5 - $from_wdays) + $to_wdays;
        return $diff_wd;
    }    

    public function findShortKitsJobs($parameters)
    {
        $name       = $parameters['name'];
        $salesOrder = $parameters['sales_order'];
        $partNumber = $parameters['part_number'];

        $qb = $this->createQueryBuilder('j')
            ->join('j.kitting', 'kitting')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->andWhere("(kittingShort1.partNumber != '' AND kittingShort1.shortClass = 0) OR
                        (kittingShort2.partNumber != '' AND kittingShort2.shortClass = 0) OR
                        (kittingShort3.partNumber != '' AND kittingShort3.shortClass = 0) OR
                        (kittingShort4.partNumber != '' AND kittingShort4.shortClass = 0)")
            ->andWhere("j.cancelledDate IS NULL");

        if ($name) {
            $qb->andWhere("j.name LIKE :name")
                ->setParameter('name', "%" . $name . "%");
        }

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        if ($partNumber) {
            $qb->andWhere("kittingShort1.partNumber LIKE :partNumber OR 
                           kittingShort2.partNumber LIKE :partNumber OR 
                           kittingShort3.partNumber LIKE :partNumber OR 
                           kittingShort4.partNumber LIKE :partNumber")
                ->setParameter('partNumber', "%" . $partNumber . "%");
        }
        
        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("kittingShort1.receivedDate", "ASC")
            ->addOrderBy("kittingShort2.receivedDate", "ASC")
            ->addOrderBy("kittingShort3.receivedDate", "ASC")
            ->addOrderBy("kittingShort4.receivedDate", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findReceiverJobs($parameters)
    {
        $partNumber     = $parameters['part_number'];
        $vendorPoNumber = $parameters['vendor_po_number'];

        $qb = $this->createQueryBuilder('j')
            ->join('j.kitting', 'kitting')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->andWhere("(kitting.kittingShort1 IS NOT NULL AND kittingShort1.receivedDate IS NULL) OR 
                        (kitting.kittingShort2 IS NOT NULL AND kittingShort2.receivedDate IS NULL) OR 
                        (kitting.kittingShort3 IS NOT NULL AND kittingShort3.receivedDate IS NULL) OR 
                        (kitting.kittingShort4 IS NOT NULL AND kittingShort4.receivedDate IS NULL)")
            ->andWhere("j.cancelledDate IS NULL");

        if ($partNumber) {
            $qb->andWhere("kittingShort1.partNumber LIKE :partNumber OR 
                           kittingShort2.partNumber LIKE :partNumber OR 
                           kittingShort3.partNumber LIKE :partNumber OR 
                           kittingShort4.partNumber LIKE :partNumber")
                ->setParameter('partNumber', "%" . $partNumber . "%");
        }

        if ($vendorPoNumber) {
            $qb->andWhere("kittingShort1.vendorPoNumber = :vendorPoNumber OR 
                           kittingShort2.vendorPoNumber = :vendorPoNumber OR 
                           kittingShort3.vendorPoNumber = :vendorPoNumber OR 
                           kittingShort4.vendorPoNumber = :vendorPoNumber")
                ->setParameter('vendorPoNumber', $vendorPoNumber);
        }

        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findManufacturerJobs($parameters)
    {
        $dateNeededFrom = $parameters['date_needed_from'];
        $dateNeededTo   = $parameters['date_needed_to'];

        $qb = $this->createQueryBuilder('j')
            ->join('j.kitting', 'kitting')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->andWhere("(kitting.kittingShort1 IS NOT NULL AND kittingShort1.modDoneDate IS NULL) OR 
                        (kitting.kittingShort2 IS NOT NULL AND kittingShort2.modDoneDate IS NULL) OR 
                        (kitting.kittingShort3 IS NOT NULL AND kittingShort3.modDoneDate IS NULL) OR 
                        (kitting.kittingShort4 IS NOT NULL AND kittingShort4.modDoneDate IS NULL)")
            ->andWhere("j.cancelledDate IS NULL");
        
        if ($dateNeededFrom) {
            $qb->andWhere('kittingShort1.dateNeeded >= :dateNeededFrom')
                ->setParameter('dateNeededFrom', new \DateTime($dateNeededFrom));
        }

        if ($dateNeededTo) {
            $qb->andWhere('kittingShort1.dateNeeded <= :dateNeededTo')
                ->setParameter('dateNeededTo', new \DateTime($dateNeededTo . " 23:59:59"));
        }

        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findSupplyChainJobs($parameters)
    {
        $partNumber = $parameters['part_number'];
        $vendor     = $parameters['vendor'];

        $qb = $this->createQueryBuilder('j')
            ->join('j.kitting', 'kitting')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->andWhere("j.cancelledDate IS NULL");

        if ($partNumber) {
            $qb->andWhere("kittingShort1.partNumber LIKE :partNumber OR 
                           kittingShort2.partNumber LIKE :partNumber OR 
                           kittingShort3.partNumber LIKE :partNumber OR 
                           kittingShort4.partNumber LIKE :partNumber")
                ->setParameter('partNumber', "%" . $partNumber . "%");
        }

        if ($vendor) {
            $qb->andWhere("kittingShort1.vendor LIKE :vendor OR 
                           kittingShort2.vendor LIKE :vendor OR 
                           kittingShort3.vendor LIKE :vendor OR 
                           kittingShort4.vendor LIKE :vendor")
                ->setParameter('vendor', "%" . $vendor . "%");
        }

        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->addOrderBy("kittingShort1.dateNeeded", "ASC")
            ->addOrderBy("kittingShort2.dateNeeded", "ASC")
            ->addOrderBy("kittingShort3.dateNeeded", "ASC")
            ->addOrderBy("kittingShort4.dateNeeded", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findMacProductionJobs($parameters)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('WEEK', 'DoctrineExtensions\Query\Mysql\Week');

        $salesOrder                     = array_key_exists('sales_order', $parameters) ? $parameters['sales_order'] : null;
        $plannerEstimatedShipDateFrom   = array_key_exists('planner_esd_date_from', $parameters) ? $parameters['planner_esd_date_from'] : null;
        $plannerEstimatedShipDateTo     = array_key_exists('planner_esd_date_to', $parameters) ? $parameters['planner_esd_date_to'] : null;       
        $plannerEstimatedShipWeekFrom   = array_key_exists('planner_esd_week_from', $parameters) ? $parameters['planner_esd_week_from'] : null;
        $plannerEstimatedShipWeekTo     = array_key_exists('planner_esd_week_to', $parameters) ? $parameters['planner_esd_week_to'] : null;
        $filledCompletely               = array_key_exists('filled_completely', $parameters)? $parameters['filled_completely'] : null;

        $qb = $this->createQueryBuilder('j')
            ->addSelect('0 AS HIDDEN customSortOrder')        
            ->join('j.scheduling', 'scheduling')
            ->join('j.kitting', 'kitting')
            ->join('j.buildLocation', 'buildLocation')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("buildLocation.name = 'MAC'")
            ->andWhere("scheduling.completionDate IS NULL")
            ->andWhere("j.cancelledDate IS NULL");

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        if ($plannerEstimatedShipDateFrom) {
            $qb->andWhere("j.plannerEstimatedShipDate >= :plannerEstimatedShipDateFrom")
                ->setParameter('plannerEstimatedShipDateFrom', new \DateTime($plannerEstimatedShipDateFrom));
        }

        if ($plannerEstimatedShipDateTo) {
            $qb->andWhere("j.plannerEstimatedShipDate <= :plannerEstimatedShipDateTo")
                ->setParameter('plannerEstimatedShipDateTo', new \DateTime($plannerEstimatedShipDateTo));
        }

        if ($plannerEstimatedShipWeekFrom) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) >= :plannerEstimatedShipWeekFrom")
                ->setParameter('plannerEstimatedShipWeekFrom', $plannerEstimatedShipWeekFrom);
        }

        if ($plannerEstimatedShipWeekTo) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) <= :plannerEstimatedShipWeekTo")
                ->setParameter('plannerEstimatedShipWeekTo', $plannerEstimatedShipWeekTo);
        }

        if ($filledCompletely) {
            $qb->andWhere("kitting.filledCompletely = :filledCompletely")
                ->setParameter('filledCompletely', $filledCompletely);
        }

        $results = $qb->addOrderBy("customSortOrder", "ASC")
            ->addOrderBy("j.salesOrder", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        // Add the custom sort order so that we can use it for conditional formatting
        foreach ($results as $index => $result) {
            if ($result->getPlannerEstimatedShipDate()->format('Y-m-d') <= date('Y-m-d')) {
                $results[$index]->customSortOrder = 1;
            } elseif ($result->getScheduling()->getPriority() == 3) {
                $results[$index]->customSortOrder = 2;
            } else {
                $results[$index]->customSortOrder = null;
            }
        }

        return $results;
    }

    public function findV2ProductionJobs($parameters)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('WEEK', 'DoctrineExtensions\Query\Mysql\Week');

        $salesOrder                     = array_key_exists('sales_order', $parameters) ? $parameters['sales_order'] : null;
        $plannerEstimatedShipDateFrom   = array_key_exists('planner_esd_date_from', $parameters) ? $parameters['planner_esd_date_from'] : null;
        $plannerEstimatedShipDateTo     = array_key_exists('planner_esd_date_to', $parameters) ? $parameters['planner_esd_date_to'] : null;
        $plannerEstimatedShipWeekFrom   = array_key_exists('planner_esd_week_from', $parameters) ? $parameters['planner_esd_week_from'] : null;
        $plannerEstimatedShipWeekTo     = array_key_exists('planner_esd_week_to', $parameters) ? $parameters['planner_esd_week_to'] : null;
        $filledCompletely               = array_key_exists('filled_completely', $parameters)? $parameters['filled_completely'] : null;

        // 1 (RED) : planner ESD <= today
        // 2 (ORANGE) : priority Rush (3)
        // 3 (YELLOW) : priority Hot (2)
        // 99 : normal
        $qb = $this->createQueryBuilder('j')
            ->addSelect('0 AS HIDDEN customSortOrder')
            ->join('j.scheduling', 'scheduling')
            ->join('j.kitting', 'kitting')
            ->join('j.buildLocation', 'buildLocation')
            ->leftJoin('j.paint', 'paint')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("j.macPurchaseOrder IS NULL")
            ->andWhere("buildLocation.name = 'V2'")
            ->andWhere("scheduling.completionDate IS NULL")
            ->andWhere("j.cancelledDate IS NULL");
            
        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        if ($plannerEstimatedShipDateFrom) {
            $qb->andWhere("j.plannerEstimatedShipDate >= :plannerEstimatedShipDateFrom")
                ->setParameter('plannerEstimatedShipDateFrom', new \DateTime($plannerEstimatedShipDateFrom));
        }

        if ($plannerEstimatedShipDateTo) {
            $qb->andWhere("j.plannerEstimatedShipDate <= :plannerEstimatedShipDateTo")
                ->setParameter('plannerEstimatedShipDateTo', new \DateTime($plannerEstimatedShipDateTo));
        }

        if ($plannerEstimatedShipWeekFrom) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) >= :plannerEstimatedShipWeekFrom")
                ->setParameter('plannerEstimatedShipWeekFrom', $plannerEstimatedShipWeekFrom);
        }

        if ($plannerEstimatedShipWeekTo) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) <= :plannerEstimatedShipWeekTo")
                ->setParameter('plannerEstimatedShipWeekTo', $plannerEstimatedShipWeekTo);
        }

        if ($filledCompletely) {
            $qb->andWhere("kitting.filledCompletely = :filledCompletely")
                ->setParameter('filledCompletely', $filledCompletely);
        }

        $results = $qb->addOrderBy("customSortOrder", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->addOrderBy("j.salesOrder", "ASC")
            ->getQuery()
            ->getResult();

        // Add the custom sort order so that we can use it for conditional formatting
        foreach ($results as $index => $result) {
            if ($result->getPlannerEstimatedShipDate()->format('Y-m-d') <= date('Y-m-d')) {
                $results[$index]->customSortOrder = 1;
            } elseif ($result->getScheduling()->getPriority() == 3) {
                $results[$index]->customSortOrder = 2;
            } else {
                $results[$index]->customSortOrder = null;
            }
        }

        return $results;
    }

    public function getJobsClearToBuild($location)
    {
        $qb = $this->createQueryBuilder('j')
            ->join('j.scheduling', 'scheduling')
            ->join('j.kitting', 'kitting')
            ->join('j.buildLocation', 'buildLocation')
            ->leftJoin('j.paint', 'paint')
            ->where("kitting.filledCompletely = 1")
            ->andWhere("paint.location IS NOT NULL")
            ->andWhere("scheduling.completionDate IS NULL")
            ->andWhere("j.cancelledDate IS NULL");

        if (strtolower($location) == 'v2 production') {
            $qb->andWhere("buildLocation.name = 'V2'")
               ->andWhere("j.macPurchaseOrder IS NULL");
        } elseif (strtolower($location) == 'mac production') {
            $qb->andWhere("buildLocation.name = 'MAC'");
        } else {
            return null;
        }

        $results = $qb
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function getJobsWithoutPo($stage)
    {
        $qb = $this->createQueryBuilder('j')
            ->join('j.kitting', 'kitting')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->andWhere("(kitting.kittingShort1 IS NOT NULL AND kittingShort1.vendorPoNumber IS NULL AND (kittingShort1.vendor IS NULL or UPPER(kittingShort1.vendor) != 'V2')) OR 
                        (kitting.kittingShort2 IS NOT NULL AND kittingShort2.vendorPoNumber IS NULL AND (kittingShort2.vendor IS NULL or UPPER(kittingShort2.vendor) != 'V2')) OR 
                        (kitting.kittingShort3 IS NOT NULL AND kittingShort3.vendorPoNumber IS NULL AND (kittingShort3.vendor IS NULL or UPPER(kittingShort3.vendor) != 'V2')) OR 
                        (kitting.kittingShort4 IS NOT NULL AND kittingShort4.vendorPoNumber IS NULL AND (kittingShort4.vendor IS NULL or UPPER(kittingShort4.vendor) != 'V2'))")
            ->andWhere("j.cancelledDate IS NULL");

        if (strtolower($stage) != 'supply chain') {
            return null;
        }

        $results = $qb
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findShipperJobs($parameters)
    {

        $salesOrder     = $parameters['sales_order'];
        $shipDate       = $parameters['ship_date'];

        $qb = $this->createQueryBuilder('j')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('j.shipping', 'shipping')
            ->where('scheduling.completionDate IS NOT NULL')
            ->andWhere("((shipping.shipDate IS NULL) OR (shipping.isComplete = 1 AND shipping.secondShipDate IS NULL))")
            ->andWhere("j.cancelledDate IS NULL");

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        if ($shipDate) {
            $emConfig = $this->getEntityManager()->getConfiguration();
            $emConfig->addCustomDatetimeFunction('DATE', 'DoctrineExtensions\Query\Mysql\Date');

            $qb->andWhere('DATE(shipping.shipDate) = :shipDate')
                ->setParameter('shipDate', new \DateTime($shipDate));
        }

        $results = $qb->addOrderBy("scheduling.priority", "DESC")
            ->addOrderBy("j.salesOrder", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findSchedulerJobs($parameters)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('WEEK', 'DoctrineExtensions\Query\Mysql\Week');
        
        $name                           = $parameters['name'];
        $salesOrder                     = $parameters['sales_order'];
        $filledCompletely               = $parameters['filled_completely'];
        $nonShipped                     = $parameters['non_shipped'];
        $filter                         = $parameters['selected_filter'];
        $buildLocation                  = $parameters['selected_location'];
        $priority                       = $parameters['selected_priority'];
        $estimatedShipDateFrom          = $parameters['esd_date_from'];
        $estimatedShipDateTo            = $parameters['esd_date_to'];
        $plannerEstimatedShipWeekFrom   = $parameters['planner_esd_week_from'];
        $plannerEstimatedShipWeekTo     = $parameters['planner_esd_week_to'];

        $qb = $this->createQueryBuilder('j')
            ->addSelect('1 AS HIDDEN cf')
            ->addSelect("CASE 
                            WHEN (scheduling.priority = -2) THEN 1 
                            WHEN (scheduling.priority = 3) THEN 2
                            WHEN (UPPER(kitting.location) = 'INV') THEN 3
                            WHEN ((kittingShort1.id IS NOT NULL AND kittingShort1.shortClass = 1) OR
                                  (kittingShort2.id IS NOT NULL AND kittingShort2.shortClass = 2) OR
                                  (kittingShort3.id IS NOT NULL AND kittingShort3.shortClass = 3) OR
                                  (kittingShort4.id IS NOT NULL AND kittingShort4.shortClass = 4)) THEN 4
                            WHEN (kittingShort1.id IS NOT NULL OR 
                                  kittingShort2.id IS NOT NULL OR 
                                  kittingShort3.id IS NOT NULL OR 
                                  kittingShort4.id IS NOT NULL) THEN 5
                            WHEN (scheduling.priority != -2 AND 
                                  paint.location IS NOT NULL AND 
                                  kitting.location IS NOT NULL) THEN 6
                            ELSE 99 
                        END AS HIDDEN customSortOrder")
            ->join('j.kitting', 'kitting')
            ->join('j.scheduling', 'scheduling')
            ->leftJoin('j.shipping', 'shipping')
            ->leftJoin('j.paint', 'paint')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where('j.id > 0')
            ->andWhere("j.cancelledDate IS NULL");

        // Filter settings
        if ($filter) {
            switch ($filter) {
        // 0 -> Not vetted 
                case 0: 
                    $qb->andWhere("scheduling.priority = -2"); 
                    break;
                case 1: 
        // 1 -> Painted part shorts 
                    $qb->andWhere("(kitting.kittingShort1 IS NOT NULL AND kittingShort1.shortClass = 1) OR
                                   (kitting.kittingShort2 IS NOT NULL AND kittingShort2.shortClass = 1) OR
                                   (kitting.kittingShort3 IS NOT NULL AND kittingShort3.shortClass = 1) OR
                                   (kitting.kittingShort4 IS NOT NULL AND kittingShort4.shortClass = 1)"); 
                    break;
        // 2 -> All shorts 
                case 2:
                    $qb->andWhere("(kitting.kittingShort1 IS NOT NULL) OR
                                   (kitting.kittingShort2 IS NOT NULL) OR
                                   (kitting.kittingShort3 IS NOT NULL) OR
                                   (kitting.kittingShort4 IS NOT NULL)"); 
                    break;
        // 3 -> All jobs 
                case 3: break; 
        // 4 -> Jobs CTK : Clear to kit; jobs vetted and jobs with no shorts or shorts received or shorts class = ignore
                case 4:
                    $qb->andWhere("scheduling.priority != -2")
                       ->andWhere("(kitting.kittingShort1 IS NULL AND 
                                    kitting.kittingShort2 IS NULL AND 
                                    kitting.kittingShort3 IS NULL AND 
                                    kitting.kittingShort4 IS NULL) OR
                                   (kitting.kittingShort1 IS NOT NULL AND (kittingShort1.receivedDate IS NOT NULL OR kittingShort1.shortClass = 2)) OR
                                   (kitting.kittingShort2 IS NOT NULL AND (kittingShort2.receivedDate IS NOT NULL OR kittingShort2.shortClass = 2)) OR
                                   (kitting.kittingShort3 IS NOT NULL AND (kittingShort3.receivedDate IS NOT NULL OR kittingShort3.shortClass = 2)) OR
                                   (kitting.kittingShort4 IS NOT NULL AND (kittingShort4.receivedDate IS NOT NULL OR kittingShort4.shortClass = 2))"); 
                    break;
        // 5 -> Jobs CTP : Clear to paint; jobs vetted and jobs with no painted parts shorts or painted parts short received
                case 5: 
                    $qb->andWhere("scheduling.priority != -2")
                       ->andWhere("(kitting.kittingShort1 IS NOT NULL AND (kittingShort1.shortClass = 0 OR (kittingShort1.shortClass = 1 AND kittingShort1.receivedDate IS NOT NULL))) OR
                                   (kitting.kittingShort2 IS NOT NULL AND (kittingShort2.shortClass = 0 OR (kittingShort2.shortClass = 1 AND kittingShort2.receivedDate IS NOT NULL))) OR
                                   (kitting.kittingShort3 IS NOT NULL AND (kittingShort3.shortClass = 0 OR (kittingShort3.shortClass = 1 AND kittingShort3.receivedDate IS NOT NULL))) OR
                                   (kitting.kittingShort4 IS NOT NULL AND (kittingShort4.shortClass = 0 OR (kittingShort4.shortClass = 1 AND kittingShort4.receivedDate IS NOT NULL)))"); 
                    break;
        // 6 -> Jobs CTB : Clear to build; jobs vetted and have a paint location and have a kit location
                case 6: 
                    $qb->andWhere("scheduling.priority != -2")
                       ->andWhere("paint.location IS NOT NULL")
                       ->andWhere("kitting.location IS NOT NULL");
                    break;
            }
        }

        if ($name) {
            $qb->andWhere("j.name LIKE :name")
                ->setParameter('name', "%" . $name . "%");
        }

        if ($salesOrder) {
            $qb->andWhere("j.salesOrder LIKE :salesOrder")
                ->setParameter('salesOrder', "%" . $salesOrder . "%");
        }

        if ($filledCompletely) {
            $qb->andWhere("kitting.filledCompletely = :filledCompletely")
                ->setParameter('filledCompletely', $filledCompletely);
        }

        if ($nonShipped) {
            $qb->andWhere("shipping.shipDate IS NULL");
        }

        if ($buildLocation != 0) {
            $qb->andWhere("j.buildLocation = :buildLocation")
                ->setParameter('buildLocation', $buildLocation);
        }

        if ($priority != 99) { // 99 means ALL
            $qb->andWhere("scheduling.priority = :priority")
                ->setParameter('priority', $priority);
        }

        if ($estimatedShipDateFrom) {
            $qb->andWhere("j.estimatedShipDate >= :estimatedShipDateFrom")
                ->setParameter('estimatedShipDateFrom', new \DateTime($estimatedShipDateFrom));
        }

        if ($estimatedShipDateTo) {
            $qb->andWhere("j.estimatedShipDate <= :estimatedShipDateTo")
                ->setParameter('estimatedShipDateTo', new \DateTime($estimatedShipDateTo));
        }

        if ($plannerEstimatedShipWeekFrom) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) >= :plannerEstimatedShipWeekFrom")
                ->setParameter('plannerEstimatedShipWeekFrom', $plannerEstimatedShipWeekFrom);
        }
        if ($plannerEstimatedShipWeekTo) {
            $qb->andWhere("WEEK(j.plannerEstimatedShipDate,1) <= :plannerEstimatedShipWeekTo")
                ->setParameter('plannerEstimatedShipWeekTo', $plannerEstimatedShipWeekTo);
        }

        $results = $qb->addOrderBy("customSortOrder", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        // Add the custom sort order so that we can use it for conditional formatting
        foreach ($results as $index => $result) {
            if ($result->getScheduling()->getPriority() == 3) { // rush
                $results[$index]->cf = 1;
            } elseif (($result->getKitting()->getKittingShort1() ||
                       $result->getKitting()->getKittingShort2() ||
                       $result->getKitting()->getKittingShort3() ||
                       $result->getKitting()->getKittingShort4()) &&
                       self::date_diff_weekdays(date('Y-m-d'), $result->getPlannerEstimatedShipDate()->format('Y-m-d')) <= 7) {
                $results[$index]->cf = 2;
            } elseif (strtoupper($result->getKitting()->getLocation()) == 'INV') {
                $results[$index]->cf = 3;
            } else {
                $results[$index]->cf = null;
            }

        }

        return $results;
    }

}
