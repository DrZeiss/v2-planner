<?php

namespace V2\MainBundle\Repository;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends \Doctrine\ORM\EntityRepository
{
    public function getJobStats()
    {
        $qb = $this->createQueryBuilder('j')
            ->select('COUNT(j.id) as total')
            ->leftJoin('j.kitting', 'kitting')
            ->leftJoin('j.bom', 'bom')
            ->leftJoin('j.shipping', 'shipping')
            ->leftJoin('j.scheduling', 'scheduling');
        
        $results = $qb->getQuery()
            ->getResult();

        return $results;
    }

    public function findKitterJobs()
    {
        $qb         = $this->createQueryBuilder('j');
        $results    = $qb->join('j.kitting', 'kitting')
            ->where("kitting.filledCompletely IS NULL")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findReceiverJobs()
    {
        $qb         = $this->createQueryBuilder('j');
        $results    = $qb->join('j.kitting', 'kitting')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->andWhere("(kitting.kittingShort1 IS NOT NULL AND kittingShort1.receivedDate IS NULL) OR 
                        (kitting.kittingShort2 IS NOT NULL AND kittingShort2.receivedDate IS NULL) OR 
                        (kitting.kittingShort3 IS NOT NULL AND kittingShort3.receivedDate IS NULL) OR 
                        (kitting.kittingShort4 IS NOT NULL AND kittingShort4.receivedDate IS NULL)")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findManufacturerJobs()
    {
        $qb         = $this->createQueryBuilder('j');
        $results    = $qb->join('j.kitting', 'kitting')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->andWhere("(kitting.kittingShort1 IS NOT NULL AND kittingShort1.modDoneDate IS NULL) OR 
                        (kitting.kittingShort2 IS NOT NULL AND kittingShort2.modDoneDate IS NULL) OR 
                        (kitting.kittingShort3 IS NOT NULL AND kittingShort3.modDoneDate IS NULL) OR 
                        (kitting.kittingShort4 IS NOT NULL AND kittingShort4.modDoneDate IS NULL)")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findSupplyChainJobs()
    {
        $qb         = $this->createQueryBuilder('j');
        $results    = $qb->join('j.kitting', 'kitting')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 0")
            ->addOrderBy("kittingShort1.dateNeeded", "ASC")
            ->addOrderBy("kittingShort2.dateNeeded", "ASC")
            ->addOrderBy("kittingShort3.dateNeeded", "ASC")
            ->addOrderBy("kittingShort4.dateNeeded", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findMacProductionJobs()
    {
        $qb = $this->createQueryBuilder('j')
            ->join('j.scheduling', 'scheduling')
            ->join('j.kitting', 'kitting')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("kitting.filledCompletely = 1")
            ->andWhere("j.macPurchaseOrder IS NOT NULL");
            
        $results = $qb->addOrderBy("scheduling.priority", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findV2ProductionJobs()
    {
        $qb = $this->createQueryBuilder('j')
            ->join('j.scheduling', 'scheduling')
            ->join('j.kitting', 'kitting')
            ->leftJoin('kitting.kittingShort1', 'kittingShort1')
            ->leftJoin('kitting.kittingShort2', 'kittingShort2')
            ->leftJoin('kitting.kittingShort3', 'kittingShort3')
            ->leftJoin('kitting.kittingShort4', 'kittingShort4')
            ->where("j.macPurchaseOrder IS NULL");
            
        $results = $qb->addOrderBy("scheduling.priority", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

    public function findSchedulerJobs()
    {
        $qb = $this->createQueryBuilder('j')
            ->join('j.scheduling', 'scheduling');
            // ->join('j.kitting', 'kitting')
            // ->where("kitting.filledCompletely = 1")
            // ->andWhere("j.macPurchaseOrder IS NULL");
            
        $results = $qb->addOrderBy("scheduling.priority", "ASC")
            ->addOrderBy("j.plannerEstimatedShipDate", "ASC")
            ->getQuery()
            ->getResult();

        return $results;
    }

}
